{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wasadmin\\\\Documents\\\\SWAPIReact\\\\src\\\\PeopleList.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PeopleList() {\n  async function getPeople() {\n    let url = 'https://swapi.dev/api/people';\n    while (url) {\n      try {\n        const fetchedPersons = await fetch(url).then(res => res.json()).then(res => {\n          url = res.next;\n          return res;\n        }).then(res => res.results).then(res => res.map(p => ({\n          ...p,\n          id: +getPersonIdFromUrl(p.url)\n        })));\n        persons.push(...fetchedPersons);\n      } catch (ex) {\n        console.error(\"Error reading people.\", ex.message);\n      }\n    }\n    console.log(\"All the persons are \", persons);\n  }\n  const getPersonIdFromUrl = url => {\n    const re = /.*people\\/(\\d+).*/;\n    const matches = url.match(re);\n    if (!matches) throw \"Bad URL. Not a people URL.\";\n    return matches[1];\n  };\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Star Wars Universe Lookup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"searchString\",\n        children: [\"Who you looking for? \", /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"small\",\n          children: \"(Regular expressions are cool here)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 52\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"searchString\",\n        autocomplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"people\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_c = PeopleList;\nvar _c;\n$RefreshReg$(_c, \"PeopleList\");","map":{"version":3,"names":["PeopleList","getPeople","url","fetchedPersons","fetch","then","res","json","next","results","map","p","id","getPersonIdFromUrl","persons","push","ex","console","error","message","log","re","matches","match"],"sources":["C:/Users/wasadmin/Documents/SWAPIReact/src/PeopleList.js"],"sourcesContent":["export function PeopleList() {\r\n    async function getPeople() {\r\n        let url = 'https://swapi.dev/api/people';\r\n      \r\n        while (url) {\r\n          try {\r\n            const fetchedPersons = await fetch(url)\r\n              .then(res => res.json())\r\n              .then(res => { url = res.next; return res })\r\n              .then(res => res.results)\r\n              .then(res => res.map(p => ({ ...p, id: +getPersonIdFromUrl(p.url) })))\r\n            persons.push(...fetchedPersons);\r\n          }\r\n          catch (ex) {\r\n            console.error(\"Error reading people.\", ex.message);\r\n          }\r\n        }\r\n        console.log(\"All the persons are \", persons)\r\n      }\r\n\r\n      const getPersonIdFromUrl = (url) => {\r\n        const re = /.*people\\/(\\d+).*/\r\n        const matches = url.match(re)\r\n        if (!matches) throw \"Bad URL. Not a people URL.\"\r\n        return matches[1]\r\n      }\r\n      \r\n\r\n    return(\r\n        <body>\r\n  <div>\r\n    <h1>Star Wars Universe Lookup</h1>\r\n    <label for=\"searchString\">Who you looking for? <span class=\"small\">(Regular expressions are cool\r\n        here)</span></label>\r\n    <input id=\"searchString\" autocomplete=\"off\" />\r\n  </div>\r\n  <section id=\"people\">\r\n  </section>\r\n</body>\r\n\r\n    )\r\n}"],"mappings":";;AAAA,OAAO,SAASA,UAAU,GAAG;EACzB,eAAeC,SAAS,GAAG;IACvB,IAAIC,GAAG,GAAG,8BAA8B;IAExC,OAAOA,GAAG,EAAE;MACV,IAAI;QACF,MAAMC,cAAc,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC,CACpCG,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACC,GAAG,IAAI;UAAEJ,GAAG,GAAGI,GAAG,CAACE,IAAI;UAAE,OAAOF,GAAG;QAAC,CAAC,CAAC,CAC3CD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACG,OAAO,CAAC,CACxBJ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACI,GAAG,CAACC,CAAC,KAAK;UAAE,GAAGA,CAAC;UAAEC,EAAE,EAAE,CAACC,kBAAkB,CAACF,CAAC,CAACT,GAAG;QAAE,CAAC,CAAC,CAAC,CAAC;QACxEY,OAAO,CAACC,IAAI,CAAC,GAAGZ,cAAc,CAAC;MACjC,CAAC,CACD,OAAOa,EAAE,EAAE;QACTC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,EAAE,CAACG,OAAO,CAAC;MACpD;IACF;IACAF,OAAO,CAACG,GAAG,CAAC,sBAAsB,EAAEN,OAAO,CAAC;EAC9C;EAEA,MAAMD,kBAAkB,GAAIX,GAAG,IAAK;IAClC,MAAMmB,EAAE,GAAG,mBAAmB;IAC9B,MAAMC,OAAO,GAAGpB,GAAG,CAACqB,KAAK,CAACF,EAAE,CAAC;IAC7B,IAAI,CAACC,OAAO,EAAE,MAAM,4BAA4B;IAChD,OAAOA,OAAO,CAAC,CAAC,CAAC;EACnB,CAAC;EAGH,oBACI;IAAA,wBACN;MAAA,wBACE;QAAA,UAAI;MAAyB;QAAA;QAAA;QAAA;MAAA,QAAK,eAClC;QAAO,GAAG,EAAC,cAAc;QAAA,WAAC,uBAAqB;UAAM,KAAK,EAAC,OAAO;UAAA,UAAC;QAC1D;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QAAQ,eACxB;QAAO,EAAE,EAAC,cAAc;QAAC,YAAY,EAAC;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAC1C,eACN;MAAS,EAAE,EAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QACV;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAGP;AAAC,KAzCetB,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}