{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wasadmin\\\\Documents\\\\SWAPIReact\\\\src\\\\PeopleList.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function PeopleList() {\n  let persons = [];\n  let url = 'https://swapi.dev/api/people';\n  console.log(fetch(url));\n\n  // const getPersonIdFromUrl = (url) => {\n  //     const re = /.*people\\/(\\d+).*/\n  //     const matches = url.match(re)\n  //     if (!matches) throw \"Bad URL. Not a people URL.\"\n  //     return matches[1]\n  //   }\n  async function getPeople() {\n    while (url) {\n      try {\n        const fetchedPersons = await fetch(url).then(res => res.json()).then(res => {\n          url = res.next;\n          return res;\n        }).then(res => res.results);\n        // .then(res => res.map(p => ({ ...p, id: +getPersonIdFromUrl(p.url) })))\n        persons.push(...fetchedPersons);\n      } catch (ex) {\n        console.error(\"Error reading people.\", ex.message);\n      }\n    }\n    console.log(\"All the persons are \", persons);\n  }\n  getPeople();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Star Wars Universe Lookup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"searchString\",\n        children: [\"Who you looking for? \", /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"small\",\n          children: \"(Regular expressions are cool here)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 52\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"searchString\",\n        autocomplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"people\",\n      children: persons.map(person => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", person.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n_c = PeopleList;\nvar _c;\n$RefreshReg$(_c, \"PeopleList\");","map":{"version":3,"names":["PeopleList","persons","url","console","log","fetch","getPeople","fetchedPersons","then","res","json","next","results","push","ex","error","message","map","person","name"],"sources":["C:/Users/wasadmin/Documents/SWAPIReact/src/PeopleList.js"],"sourcesContent":["export function PeopleList() {\r\n    let persons = [];\r\n    let url = 'https://swapi.dev/api/people';\r\n    console.log(fetch(url));\r\n\r\n    // const getPersonIdFromUrl = (url) => {\r\n    //     const re = /.*people\\/(\\d+).*/\r\n    //     const matches = url.match(re)\r\n    //     if (!matches) throw \"Bad URL. Not a people URL.\"\r\n    //     return matches[1]\r\n    //   }\r\n    async function getPeople(){\r\n        while (url) {\r\n            try {\r\n              const fetchedPersons = await fetch(url)\r\n                .then(res => res.json())\r\n                .then(res => { url = res.next; return res })\r\n                .then(res => res.results)\r\n                // .then(res => res.map(p => ({ ...p, id: +getPersonIdFromUrl(p.url) })))\r\n              persons.push(...fetchedPersons);\r\n            }\r\n            catch (ex) {\r\n              console.error(\"Error reading people.\", ex.message);\r\n            }\r\n          }\r\n          console.log(\"All the persons are \", persons)\r\n    }\r\n\r\n    getPeople();\r\n   \r\n\r\n      \r\n\r\n      return (\r\n        <>\r\n            <div>\r\n    <h1>Star Wars Universe Lookup</h1>\r\n    \r\n    <label for=\"searchString\">Who you looking for? <span class=\"small\">(Regular expressions are cool\r\n        here)</span></label>\r\n    <input id=\"searchString\"  autocomplete=\"off\" />\r\n  </div>\r\n  <section id=\"people\">\r\n        {persons.map(person => \r\n        <div> {person.name} </div>)}\r\n  </section>\r\n\r\n        </>\r\n      )\r\n    }\r\n\r\n    \r\n\r\n"],"mappings":";;;AAAA,OAAO,SAASA,UAAU,GAAG;EACzB,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,GAAG,GAAG,8BAA8B;EACxCC,OAAO,CAACC,GAAG,CAACC,KAAK,CAACH,GAAG,CAAC,CAAC;;EAEvB;EACA;EACA;EACA;EACA;EACA;EACA,eAAeI,SAAS,GAAE;IACtB,OAAOJ,GAAG,EAAE;MACR,IAAI;QACF,MAAMK,cAAc,GAAG,MAAMF,KAAK,CAACH,GAAG,CAAC,CACpCM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACC,GAAG,IAAI;UAAEP,GAAG,GAAGO,GAAG,CAACE,IAAI;UAAE,OAAOF,GAAG;QAAC,CAAC,CAAC,CAC3CD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACG,OAAO,CAAC;QACzB;QACFX,OAAO,CAACY,IAAI,CAAC,GAAGN,cAAc,CAAC;MACjC,CAAC,CACD,OAAOO,EAAE,EAAE;QACTX,OAAO,CAACY,KAAK,CAAC,uBAAuB,EAAED,EAAE,CAACE,OAAO,CAAC;MACpD;IACF;IACAb,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,OAAO,CAAC;EAClD;EAEAK,SAAS,EAAE;EAKT,oBACE;IAAA,wBACI;MAAA,wBACR;QAAA,UAAI;MAAyB;QAAA;QAAA;QAAA;MAAA,QAAK,eAElC;QAAO,GAAG,EAAC,cAAc;QAAA,WAAC,uBAAqB;UAAM,KAAK,EAAC,OAAO;UAAA,UAAC;QAC1D;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QAAQ,eACxB;QAAO,EAAE,EAAC,cAAc;QAAE,YAAY,EAAC;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAC3C,eACN;MAAS,EAAE,EAAC,QAAQ;MAAA,UACbL,OAAO,CAACgB,GAAG,CAACC,MAAM,iBACnB;QAAA,WAAK,GAAC,EAACA,MAAM,CAACC,IAAI,EAAC,GAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM;IAAC;MAAA;MAAA;MAAA;IAAA,QACvB;EAAA,gBAED;AAEP;AAAC,KAjDWnB,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}