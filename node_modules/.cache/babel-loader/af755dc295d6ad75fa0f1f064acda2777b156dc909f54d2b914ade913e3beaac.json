{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wasadmin\\\\Documents\\\\SWAPIReact\\\\src\\\\FilmPage.js\",\n  _s = $RefreshSig$();\n//use useParams \nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function FilmPage() {\n  _s();\n  const params = useParams();\n  const [foundFilm, setfoundFilm] = useState({});\n  const [planetIds, setPlanetIDs] = useState([]);\n  const getIdFromUrl = (entityName, url) => {\n    //debugger\n    const re = new RegExp(`.*${entityName}\\/(\\\\d+).*`);\n    const matches = url.match(re);\n    if (!matches) throw `Bad URL. Not a ${entityName} URL.`;\n    return matches[1];\n  };\n  const getFilmIdFromUrl = url => getIdFromUrl(\"films\", url);\n  const getPlanetIdFromUrl = url => getIdFromUrl(\"planets\", url);\n\n  //   console.log(`dummy planet is ` + dummyPlanet)\n\n  //    debugger;\n  async function fetchPerson() {\n    try {\n      let url = `https://swapi.dev/api/people/${params.id}`;\n      const fetchedFilm = await fetch(url).then(res => res.json());\n      // dummyPerson = fetchedFilm \n      // setPlanetID(getPlanetIdFromUrl(fetchedFilm?.homeworld))\n      console.log({\n        fetchedFilm\n      });\n      fetchedFilm.planetIds = getPlanetIdFromUrl(fetchedFilm === null || fetchedFilm === void 0 ? void 0 : fetchedFilm.homeworld);\n      console.log('printing planetid', fetchedFilm.planetId);\n      setfoundFilm(fetchedFilm);\n      console.log(fetchedFilm);\n      console.log(foundFilm);\n      console.log(`homeworld url is ` + fetchedFilm.homeworld);\n    } catch (ex) {\n      console.error(`Error reading person ${params.id} data.`, ex.message);\n    }\n    // setfoundFilm(dummyPerson)\n  }\n\n  useEffect(() => {\n    fetchPerson();\n  }, []);\n\n  // need this guy \n  console.log(params.id);\n  let dummyPlanet = -1;\n  // useEffect( ()=> {getPlanetIdFromUrl(foundFilm.homeworld)}, [])\n\n  //   console.log(`Homeworld is ` + getPlanetIdFromUrl(foundFilm.homeworld))\n  //   const [planetID,setPlanetID] = useState(-1)\n  //   setPlanetID(getPlanetIdFromUrl(foundFilm.homeworld));\n\n  //  console.log(`planet ID is ` + getPlanetIdFromUrl(foundFilm.homeworld))\n  // console.log(`planet id is ` + planetId)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"generalInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: foundFilm.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Height: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"height\",\n          children: foundFilm.height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 28\n        }, this), \" cm\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Mass: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"mass\",\n          children: foundFilm.mass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 26\n        }, this), \" kg\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Born: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"birth_year\",\n          children: foundFilm.birth_year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"planets\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Homeworld\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"homeworld\",\n          children: foundFilm.planetId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"films\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Films appeared in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(FilmPage, \"4yHpy5poIdvudyYUI8S3RegbYpU=\", false, function () {\n  return [useParams];\n});\n_c = FilmPage;\nvar _c;\n$RefreshReg$(_c, \"FilmPage\");","map":{"version":3,"names":["useParams","useState","useEffect","FilmPage","params","foundFilm","setfoundFilm","planetIds","setPlanetIDs","getIdFromUrl","entityName","url","re","RegExp","matches","match","getFilmIdFromUrl","getPlanetIdFromUrl","fetchPerson","id","fetchedFilm","fetch","then","res","json","console","log","homeworld","planetId","ex","error","message","dummyPlanet","name","height","mass","birth_year"],"sources":["C:/Users/wasadmin/Documents/SWAPIReact/src/FilmPage.js"],"sourcesContent":["//use useParams \r\nimport { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport function FilmPage() {\r\n    const params = useParams()\r\n    const [foundFilm, setfoundFilm] = useState({})\r\n    const [planetIds, setPlanetIDs] = useState([])\r\n    \r\n\r\n    const getIdFromUrl = (entityName, url) => {\r\n        //debugger\r\n        const re = new RegExp(`.*${entityName}\\/(\\\\d+).*`);\r\n        const matches = url.match(re)\r\n        if (!matches) throw `Bad URL. Not a ${entityName} URL.`\r\n        return matches[1]\r\n    }\r\n    const getFilmIdFromUrl = url => getIdFromUrl(\"films\", url)\r\n    const getPlanetIdFromUrl = url => getIdFromUrl(\"planets\", url)\r\n\r\n    //   console.log(`dummy planet is ` + dummyPlanet)\r\n\r\n    //    debugger;\r\n    async function fetchPerson() {\r\n        try {\r\n            let url = `https://swapi.dev/api/people/${params.id}`;\r\n            const fetchedFilm = await fetch(url)\r\n                .then(res => res.json())\r\n            // dummyPerson = fetchedFilm \r\n            // setPlanetID(getPlanetIdFromUrl(fetchedFilm?.homeworld))\r\n            console.log({fetchedFilm})\r\n            fetchedFilm.planetIds = getPlanetIdFromUrl(fetchedFilm?.homeworld)\r\n            console.log('printing planetid', fetchedFilm.planetId)\r\n            setfoundFilm(fetchedFilm)\r\n            console.log(fetchedFilm)\r\n            console.log(foundFilm)\r\n            console.log(`homeworld url is ` + fetchedFilm.homeworld)\r\n        }\r\n        catch (ex) {\r\n            console.error(`Error reading person ${params.id} data.`, ex.message);\r\n        }\r\n        // setfoundFilm(dummyPerson)\r\n    }\r\n\r\n    useEffect(() => { fetchPerson() }, [])\r\n\r\n    // need this guy \r\n    console.log(params.id);\r\n\r\n    let dummyPlanet = -1\r\n    // useEffect( ()=> {getPlanetIdFromUrl(foundFilm.homeworld)}, [])\r\n\r\n\r\n    //   console.log(`Homeworld is ` + getPlanetIdFromUrl(foundFilm.homeworld))\r\n    //   const [planetID,setPlanetID] = useState(-1)\r\n    //   setPlanetID(getPlanetIdFromUrl(foundFilm.homeworld));\r\n\r\n    //  console.log(`planet ID is ` + getPlanetIdFromUrl(foundFilm.homeworld))\r\n    // console.log(`planet id is ` + planetId)\r\n    return (\r\n        <>\r\n            <h1 id=\"name\"></h1>\r\n            <section id=\"generalInfo\">\r\n                <h2>{foundFilm.name}</h2>\r\n                <p>Height: <span id=\"height\">{foundFilm.height}</span> cm</p>\r\n                <p>Mass: <span id=\"mass\">{foundFilm.mass}</span> kg</p>\r\n                <p>Born: <span id=\"birth_year\">{foundFilm.birth_year}</span></p>\r\n            </section>\r\n            <section id=\"planets\">\r\n                <h3>Homeworld</h3>\r\n                <p><span id=\"homeworld\">{foundFilm.planetId}</span></p>\r\n            </section>\r\n            <section id=\"films\">\r\n                <h3>Films appeared in</h3>\r\n                <ul></ul>\r\n            </section>\r\n        </>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}