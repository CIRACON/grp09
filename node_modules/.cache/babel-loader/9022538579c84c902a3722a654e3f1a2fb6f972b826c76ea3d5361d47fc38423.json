{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wasadmin\\\\Documents\\\\SWAPIReact\\\\src\\\\PeopleList.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function PeopleList() {\n  _s();\n  const [persons, setPersons] = useState([]);\n  let dummyPersons = [];\n  let url = 'https://swapi.dev/api/people';\n  useEffect(() => {\n    getPeople();\n  }, []);\n  async function getPeople() {\n    while (url) {\n      try {\n        const fetchedPersons = await fetch(url).then(res => res.json()).then(res => {\n          url = res.next;\n          return res;\n        }).then(res => res.results).then(res => res.map(p => ({\n          ...p,\n          id: +getPersonIdFromUrl(p.url)\n        })));\n        dummyPersons.push(...fetchedPersons);\n      } catch (ex) {\n        console.error(\"Error reading people.\", ex.message);\n      }\n    }\n    setPersons(dummyPersons);\n  }\n  const getPersonIdFromUrl = url => {\n    const re = /.*people\\/(\\d+).*/;\n    const matches = url.match(re);\n    if (!matches) throw \"Bad URL. Not a people URL.\";\n    return matches[1];\n  };\n  console.log(\"All the persons are \", persons);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Star Wars Universe Lookup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"searchString\",\n        children: [\"Who you looking for? \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"small\",\n          children: \"(Regular expressions are cool here)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 60\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"searchString\",\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"people\",\n      children: persons.length > 0 && persons.map(person => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/person/${person.id}`,\n          children: [person.name, \" \", person.id, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)\n      }, person.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 35\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n_s(PeopleList, \"3dL94kAggHNyJLHmh8hlLChOUrQ=\");\n_c = PeopleList;\nvar _c;\n$RefreshReg$(_c, \"PeopleList\");","map":{"version":3,"names":["useEffect","useState","Link","PeopleList","persons","setPersons","dummyPersons","url","getPeople","fetchedPersons","fetch","then","res","json","next","results","map","p","id","getPersonIdFromUrl","push","ex","console","error","message","re","matches","match","log","length","person","name"],"sources":["C:/Users/wasadmin/Documents/SWAPIReact/src/PeopleList.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport function PeopleList() {\r\n  const [persons, setPersons] = useState([]);\r\n  let dummyPersons = [];  \r\n\r\n  let url = 'https://swapi.dev/api/people';\r\n\r\n    useEffect(() => {getPeople()}, [])\r\n\r\n    async function getPeople(){\r\n      while (url) {\r\n        try {\r\n          const fetchedPersons = await fetch(url)\r\n            .then(res => res.json())\r\n            .then(res => { url = res.next; return res })\r\n            .then(res => res.results)\r\n            .then(res => res.map(p => ({ ...p, id: +getPersonIdFromUrl(p.url) })))\r\n            dummyPersons.push(...fetchedPersons);\r\n        }\r\n        catch (ex) {\r\n          console.error(\"Error reading people.\", ex.message);\r\n        }\r\n        }\r\n        setPersons(dummyPersons)\r\n    }\r\n\r\n    const getPersonIdFromUrl = (url) => {\r\n      const re = /.*people\\/(\\d+).*/\r\n      const matches = url.match(re)\r\n      if (!matches) throw \"Bad URL. Not a people URL.\"\r\n      return matches[1]\r\n    }\r\n\r\n    console.log(\"All the persons are \", persons)\r\n      return (\r\n        <>\r\n          <div>\r\n            <h1>Star Wars Universe Lookup</h1>\r\n            \r\n            <label for=\"searchString\">Who you looking for? <span className=\"small\">(Regular expressions are cool\r\n                here)</span></label>\r\n            <input id=\"searchString\"  autoComplete=\"off\" />\r\n          </div>\r\n\r\n          <section id=\"people\">\r\n            {persons.length > 0 && \r\n            persons.map(person => <div key={person.id}>\r\n                <Link to={`/person/${person.id}`}>{person.name} {person.id} </Link>\r\n            </div>)\r\n            }\r\n          </section>\r\n        </>\r\n      )\r\n    }\r\n\r\n    \r\n\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,IAAI,QAAQ,kBAAkB;AAAC;AAAA;AAExC,OAAO,SAASC,UAAU,GAAG;EAAA;EAC3B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC1C,IAAIK,YAAY,GAAG,EAAE;EAErB,IAAIC,GAAG,GAAG,8BAA8B;EAEtCP,SAAS,CAAC,MAAM;IAACQ,SAAS,EAAE;EAAA,CAAC,EAAE,EAAE,CAAC;EAElC,eAAeA,SAAS,GAAE;IACxB,OAAOD,GAAG,EAAE;MACV,IAAI;QACF,MAAME,cAAc,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC,CACpCI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACC,GAAG,IAAI;UAAEL,GAAG,GAAGK,GAAG,CAACE,IAAI;UAAE,OAAOF,GAAG;QAAC,CAAC,CAAC,CAC3CD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACG,OAAO,CAAC,CACxBJ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACI,GAAG,CAACC,CAAC,KAAK;UAAE,GAAGA,CAAC;UAAEC,EAAE,EAAE,CAACC,kBAAkB,CAACF,CAAC,CAACV,GAAG;QAAE,CAAC,CAAC,CAAC,CAAC;QACtED,YAAY,CAACc,IAAI,CAAC,GAAGX,cAAc,CAAC;MACxC,CAAC,CACD,OAAOY,EAAE,EAAE;QACTC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,EAAE,CAACG,OAAO,CAAC;MACpD;IACA;IACAnB,UAAU,CAACC,YAAY,CAAC;EAC5B;EAEA,MAAMa,kBAAkB,GAAIZ,GAAG,IAAK;IAClC,MAAMkB,EAAE,GAAG,mBAAmB;IAC9B,MAAMC,OAAO,GAAGnB,GAAG,CAACoB,KAAK,CAACF,EAAE,CAAC;IAC7B,IAAI,CAACC,OAAO,EAAE,MAAM,4BAA4B;IAChD,OAAOA,OAAO,CAAC,CAAC,CAAC;EACnB,CAAC;EAEDJ,OAAO,CAACM,GAAG,CAAC,sBAAsB,EAAExB,OAAO,CAAC;EAC1C,oBACE;IAAA,wBACE;MAAA,wBACE;QAAA,UAAI;MAAyB;QAAA;QAAA;QAAA;MAAA,QAAK,eAElC;QAAO,GAAG,EAAC,cAAc;QAAA,WAAC,uBAAqB;UAAM,SAAS,EAAC,OAAO;UAAA,UAAC;QAC9D;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QAAQ,eACxB;QAAO,EAAE,EAAC,cAAc;QAAE,YAAY,EAAC;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAC3C,eAEN;MAAS,EAAE,EAAC,QAAQ;MAAA,UACjBA,OAAO,CAACyB,MAAM,GAAG,CAAC,IACnBzB,OAAO,CAACY,GAAG,CAACc,MAAM,iBAAI;QAAA,uBAClB,QAAC,IAAI;UAAC,EAAE,EAAG,WAAUA,MAAM,CAACZ,EAAG,EAAE;UAAA,WAAEY,MAAM,CAACC,IAAI,EAAC,GAAC,EAACD,MAAM,CAACZ,EAAE,EAAC,GAAC;QAAA;UAAA;UAAA;UAAA;QAAA;MAAO,GADvCY,MAAM,CAACZ,EAAE;QAAA;QAAA;QAAA;MAAA,QAEnC;IAAC;MAAA;MAAA;MAAA;IAAA,QAEC;EAAA,gBACT;AAEP;AAAC,GApDWf,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}