{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wasadmin\\\\Documents\\\\SWAPIReact\\\\src\\\\PlanetPage.js\",\n  _s = $RefreshSig$();\n//use useParams \nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function PlanetPage() {\n  _s();\n  const params = useParams();\n  const [foundPlanet, setFoundPlanet] = useState({});\n  let dummyPlanet = {};\n  let url = `https://swapi.dev/api/planets/${params.id}`;\n  useEffect(() => {\n    fetchPlanet();\n  }, []);\n  async function fetchPlanet() {\n    try {\n      const fetchedPlanet = await fetch(url).then(res => res.json());\n      dummyPlanet = fetchedPlanet;\n    } catch (ex) {\n      console.error(`Error reading person ${params.id} data.`, ex.message);\n    }\n    setFoundPlanet(dummyPlanet);\n  }\n  console.log(dummyPlanet);\n  console.log(foundPlanet);\n\n  // need this guy \n  console.log(params.id);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"generalInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: foundPlanet.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: foundPlanet.climate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: foundPlanet.films\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: foundPlanet.residents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(PlanetPage, \"aoZPSq3Rus8BvBSwCxsqutllLjk=\", false, function () {\n  return [useParams];\n});\n_c = PlanetPage;\nvar _c;\n$RefreshReg$(_c, \"PlanetPage\");","map":{"version":3,"names":["useParams","useState","useEffect","PlanetPage","params","foundPlanet","setFoundPlanet","dummyPlanet","url","id","fetchPlanet","fetchedPlanet","fetch","then","res","json","ex","console","error","message","log","name","climate","films","residents"],"sources":["C:/Users/wasadmin/Documents/SWAPIReact/src/PlanetPage.js"],"sourcesContent":["//use useParams \r\nimport { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\nexport function PlanetPage() {\r\n    const params = useParams()\r\n    const [foundPlanet, setFoundPlanet] = useState({})\r\n    let dummyPlanet = {};\r\n\r\n    let url = `https://swapi.dev/api/planets/${params.id}`;\r\n\r\n    useEffect( ()=> {fetchPlanet()}, [])\r\n   \r\n    async function fetchPlanet() {\r\n        try {\r\n            const fetchedPlanet = await fetch(url)\r\n            .then(res => res.json())\r\n            dummyPlanet = fetchedPlanet\r\n        }\r\n        catch (ex) {\r\n          console.error(`Error reading person ${params.id} data.`, ex.message);\r\n        }\r\n        setFoundPlanet(dummyPlanet)\r\n    }\r\n\r\n      console.log(dummyPlanet)\r\n      console.log(foundPlanet);\r\n      \r\n      // need this guy \r\n      console.log(params.id);\r\n\r\n    return (\r\n        <>\r\n            <h1 id=\"name\"></h1>\r\n            <section id=\"generalInfo\">\r\n                <h2>{foundPlanet.name}</h2>\r\n                <p>{foundPlanet.climate}</p>\r\n                <p>{foundPlanet.films}</p>\r\n                <p>{foundPlanet.residents}</p>\r\n            </section>\r\n        </>\r\n    )\r\n}"],"mappings":";;AAAA;AACA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAAA;AAG5C,OAAO,SAASC,UAAU,GAAG;EAAA;EACzB,MAAMC,MAAM,GAAGJ,SAAS,EAAE;EAC1B,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,IAAIM,WAAW,GAAG,CAAC,CAAC;EAEpB,IAAIC,GAAG,GAAI,iCAAgCJ,MAAM,CAACK,EAAG,EAAC;EAEtDP,SAAS,CAAE,MAAK;IAACQ,WAAW,EAAE;EAAA,CAAC,EAAE,EAAE,CAAC;EAEpC,eAAeA,WAAW,GAAG;IACzB,IAAI;MACA,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAACJ,GAAG,CAAC,CACrCK,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC;MACxBR,WAAW,GAAGI,aAAa;IAC/B,CAAC,CACD,OAAOK,EAAE,EAAE;MACTC,OAAO,CAACC,KAAK,CAAE,wBAAuBd,MAAM,CAACK,EAAG,QAAO,EAAEO,EAAE,CAACG,OAAO,CAAC;IACtE;IACAb,cAAc,CAACC,WAAW,CAAC;EAC/B;EAEEU,OAAO,CAACG,GAAG,CAACb,WAAW,CAAC;EACxBU,OAAO,CAACG,GAAG,CAACf,WAAW,CAAC;;EAExB;EACAY,OAAO,CAACG,GAAG,CAAChB,MAAM,CAACK,EAAE,CAAC;EAExB,oBACI;IAAA,wBACI;MAAI,EAAE,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAM,eACnB;MAAS,EAAE,EAAC,aAAa;MAAA,wBACrB;QAAA,UAAKJ,WAAW,CAACgB;MAAI;QAAA;QAAA;QAAA;MAAA,QAAM,eAC3B;QAAA,UAAIhB,WAAW,CAACiB;MAAO;QAAA;QAAA;QAAA;MAAA,QAAK,eAC5B;QAAA,UAAIjB,WAAW,CAACkB;MAAK;QAAA;QAAA;QAAA;MAAA,QAAK,eAC1B;QAAA,UAAIlB,WAAW,CAACmB;MAAS;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QACxB;EAAA,gBACX;AAEX;AAAC,GAtCerB,UAAU;EAAA,QACPH,SAAS;AAAA;AAAA,KADZG,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}