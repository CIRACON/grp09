{"ast":null,"code":"export async function PeopleList() {\n  let persons = [];\n  let url = 'https://swapi.dev/api/people';\n  console.log(fetch(url));\n  while (url) {\n    try {\n      const fetchedPersons = await fetch(url).then(res => res.json()).then(res => {\n        url = res.next;\n        return res;\n      }).then(res => res.results).then(res => res.map(p => ({\n        ...p,\n        id: +getPersonIdFromUrl(p.url)\n      })));\n      persons.push(...fetchedPersons);\n    } catch (ex) {\n      console.error(\"Error reading people.\", ex.message);\n    }\n  }\n  console.log(\"All the persons are \", persons);\n  const getPersonIdFromUrl = url => {\n    const re = /.*people\\/(\\d+).*/;\n    const matches = url.match(re);\n    if (!matches) throw \"Bad URL. Not a people URL.\";\n    return matches[1];\n  };\n}\n_c = PeopleList;\nvar _c;\n$RefreshReg$(_c, \"PeopleList\");","map":{"version":3,"names":["PeopleList","persons","url","console","log","fetch","fetchedPersons","then","res","json","next","results","map","p","id","getPersonIdFromUrl","push","ex","error","message","re","matches","match"],"sources":["C:/Users/wasadmin/Documents/SWAPIReact/src/PeopleList.js"],"sourcesContent":["export async function PeopleList() {\r\n    let persons = [];\r\n    let url = 'https://swapi.dev/api/people';\r\n    console.log(fetch(url));\r\n\r\n    while (url) {\r\n        try {\r\n          const fetchedPersons = await fetch(url)\r\n            .then(res => res.json())\r\n            .then(res => { url = res.next; return res })\r\n            .then(res => res.results)\r\n            .then(res => res.map(p => ({ ...p, id: +getPersonIdFromUrl(p.url) })))\r\n          persons.push(...fetchedPersons);\r\n        }\r\n        catch (ex) {\r\n          console.error(\"Error reading people.\", ex.message);\r\n        }\r\n      }\r\n      console.log(\"All the persons are \", persons)\r\n\r\n      const getPersonIdFromUrl = (url) => {\r\n        const re = /.*people\\/(\\d+).*/\r\n        const matches = url.match(re)\r\n        if (!matches) throw \"Bad URL. Not a people URL.\"\r\n        return matches[1]\r\n      }\r\n    }\r\n\r\n    \r\n\r\n"],"mappings":"AAAA,OAAO,eAAeA,UAAU,GAAG;EAC/B,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,GAAG,GAAG,8BAA8B;EACxCC,OAAO,CAACC,GAAG,CAACC,KAAK,CAACH,GAAG,CAAC,CAAC;EAEvB,OAAOA,GAAG,EAAE;IACR,IAAI;MACF,MAAMI,cAAc,GAAG,MAAMD,KAAK,CAACH,GAAG,CAAC,CACpCK,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACC,GAAG,IAAI;QAAEN,GAAG,GAAGM,GAAG,CAACE,IAAI;QAAE,OAAOF,GAAG;MAAC,CAAC,CAAC,CAC3CD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACG,OAAO,CAAC,CACxBJ,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACI,GAAG,CAACC,CAAC,KAAK;QAAE,GAAGA,CAAC;QAAEC,EAAE,EAAE,CAACC,kBAAkB,CAACF,CAAC,CAACX,GAAG;MAAE,CAAC,CAAC,CAAC,CAAC;MACxED,OAAO,CAACe,IAAI,CAAC,GAAGV,cAAc,CAAC;IACjC,CAAC,CACD,OAAOW,EAAE,EAAE;MACTd,OAAO,CAACe,KAAK,CAAC,uBAAuB,EAAED,EAAE,CAACE,OAAO,CAAC;IACpD;EACF;EACAhB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,OAAO,CAAC;EAE5C,MAAMc,kBAAkB,GAAIb,GAAG,IAAK;IAClC,MAAMkB,EAAE,GAAG,mBAAmB;IAC9B,MAAMC,OAAO,GAAGnB,GAAG,CAACoB,KAAK,CAACF,EAAE,CAAC;IAC7B,IAAI,CAACC,OAAO,EAAE,MAAM,4BAA4B;IAChD,OAAOA,OAAO,CAAC,CAAC,CAAC;EACnB,CAAC;AACH;AAAC,KA1BiBrB,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}